!(function (o, s, e) {
  "use strict";
  var t = "com.love2dev.addtohome",
    i = !1,
    n = localStorage.getItem(t);
  if (!n || !n.added) {
    "onbeforeinstallprompt" in o &&
      (o.addEventListener("beforeinstallprompt", function (o) {
        o.preventDefault(),
          console.log("capturing the native A2HS prompt"),
          (d = o);
      }),
      (i = !0)),
      "onappinstalled" in o &&
        o.addEventListener("appinstalled", function (o) {
          a.doLog("a2hs", "installed"),
            (n.added = !0),
            a.updateSession(),
            this.options.onInstall && this.options.onInstall.call(this);
        });
    var a,
      r,
      l = {},
      p = {
        title: "Install this PWA?",
        src: "imgs/pwa-logo-50x50.png",
        cancelMsg: "Not Now",
        installMsg: "Install",
      };
    (g.defaults = {
      appID: t,
      appName: "Progressive Web App",
      debug: !1,
      logging: !1,
      modal: !1,
      mandatory: !1,
      autostart: !0,
      skipFirstVisit: !1,
      minSessions: 0,
      startDelay: 1,
      lifespan: 15,
      displayPace: 1440,
      displayNextPrime: !1,
      mustShowCustomPrompt: !1,
      maxDisplayCount: 0,
      validLocation: [],
      onInit: null,
      onShow: null,
      onAdd: null,
      onInstall: null,
      onCancel: null,
      customCriteria: null,
      manualPrompt: null,
      customPrompt: {},
      athWrapper: ".ath-container",
      athGuidance: "ath-guidance",
      showClasses: ["animated", "d-flex"],
      showClass: "d-flex",
      hideClass: "d-none",
      promptDlg: {
        title: ".ath-banner-title",
        body: ".ath-banner",
        logo: ".ath-prompt-logo",
        cancel: ".btn-cancel",
        install: ".btn-install",
        action: { ok: "Install", cancel: "Not Now" },
      },
      prompt: {
        native: {
          targetUrl: e,
          showClasses: ["fadeInUp", "right-banner"],
          action: { ok: "Install", cancel: "Not Now" },
        },
        edge: {
          targetUrl: e,
          showClasses: [
            "edge-wrapper",
            "animated",
            "fadeIn",
            "d-block",
            "right-banner",
          ],
          imgs: [
            {
              src: "imgs/edge-a2hs-icon.png",
              alt: "Tap the Add to Homescreen Icon",
            },
          ],
        },
        chromium: {
          targetUrl: e,
          showClasses: [
            "chromium-wrapper",
            "animated",
            "fadeIn",
            "d-block",
            "right-banner",
          ],
          imgs: [
            {
              src: "imgs/chromium-guidance.png",
              alt: "Tap the Add to Homescreen Icon",
            },
          ],
        },
        iphone: {
          targetUrl: e,
          showClasses: ["iphone-wrapper", "animated", "fadeIn", "d-block"],
          imgs: [
            {
              src: "imgs/ios-safari-share-button-highlight.jpg",
              alt: "Tap the Share Icon",
            },
            {
              src: "imgs/iphone-a2hs-swipe-to-right.jpg",
              classes: ["animated", "fadeIn", "overlay-1", "delay-2s"],
              alt: "Swipe to the right",
            },
            {
              src: "imgs/iphone-a2hs-icon-highlight.jpg",
              classes: ["animated", "fadeIn", "overlay-2", "delay-4s"],
              alt: "Tap the Add to Homescreen Icon",
            },
          ],
        },
        ipad: {
          targetUrl: e,
          showClasses: ["ipad-wrapper", "animated", "fadeInUp", "d-block"],
          imgs: [
            {
              src: "imgs/safari-ipad-share-a2hs-right.jpg",
              alt: "Tap the Add to Homescreen Icon",
            },
          ],
        },
        firefox: {
          targetUrl: e,
          showClasses: ["firefox-wrapper", "animated", "fadeIn", "d-block"],
          imgs: [
            {
              src: "imgs/firefox-a2hs-icon.png",
              alt: "Tap the Add to Homescreen Icon",
            },
          ],
        },
        samsung: {
          targetUrl: e,
          showClasses: ["samsung-wrapper", "animated", "fadeIn", "d-block"],
          imgs: [
            {
              src: "imgs/samsung-internet-a2hs-icon.png",
              alt: "Tap the Add to Homescreen Icon",
            },
          ],
        },
        opera: {
          targetUrl: e,
          showClasses: [
            "opera-home-screen-wrapper",
            "animated",
            "fadeIn",
            "d-block",
          ],
          imgs: [
            {
              src: "imgs/opera-add-to-homescreen.png",
              alt: "Tap the Add to Homescreen Icon",
            },
          ],
        },
      },
    }),
      (r = o.navigator.userAgent),
      (l.isIDevice = /iphone|ipod|ipad/i.test(r)),
      (l.isSamsung = /Samsung/i.test(r)),
      (l.isFireFox = /Firefox/i.test(r)),
      (l.isOpera = /opr/i.test(r)),
      (l.isEdge = /edg/i.test(r)),
      l.isFireFox && (l.isFireFox = /android/i.test(r)),
      l.isOpera && (l.isOpera = /android/i.test(r)),
      (l.isChromium = "onbeforeinstallprompt" in o),
      (l.isInWebAppiOS = !0 === o.navigator.standalone),
      (l.isInWebAppChrome = o.matchMedia("(display-mode: standalone)").matches),
      (l.isMobileSafari =
        l.isIDevice && r.indexOf("Safari") > -1 && r.indexOf("CriOS") < 0),
      (l.isStandalone = l.isInWebAppiOS || l.isInWebAppChrome),
      (l.isiPad = l.isMobileSafari && r.indexOf("iPad") > -1),
      (l.isiPhone = l.isMobileSafari && -1 === r.indexOf("iPad")),
      (l.isCompatible =
        l.isChromium ||
        l.isMobileSafari ||
        l.isSamsung ||
        l.isFireFox ||
        l.isOpera);
    var d,
      c = {
        lastDisplayTime: 0,
        returningVisitor: !1,
        displayCount: 0,
        optedout: !1,
        added: !1,
        sessions: 0,
        nextSession: 0,
      };
    (n = n ? JSON.parse(n) : c),
      (g.removeSession = function (o) {
        localStorage.removeItem(o || g.defaults.appID);
      }),
      (g.doLog = function (o) {
        this.options.logging && console.log(o);
      }),
      (l.cancelPrompt = function (o) {
        return (
          o.preventDefault(),
          a.options.onCancel && a.options.onCancel(),
          l.closePrompt(),
          !1
        );
      }),
      (l.closePrompt = function () {
        var o = s.querySelector(a.options.athWrapper);
        o && o.classList.remove(...a.options.showClasses);
      }),
      (l.handleInstall = function (o) {
        return (
          a.options.onInstall && a.options.onInstall(),
          !d || (a.options.debug && "native" !== u())
            ? (function (o) {
                var e,
                  t = u(o),
                  i = s.querySelector(a.options.athWrapper);
                if (i)
                  if (
                    (a.autoHideTimer && clearTimeout(a.autoHideTimer),
                    !o && "native" === t && d)
                  )
                    l.closePrompt(), m();
                  else {
                    var n = Object.assign(
                      {},
                      p,
                      a.options.customPrompt,
                      a.options.prompt[t]
                    );
                    if (n.targetUrl) location.replace(n.targetUrl);
                    else {
                      var r = i.querySelector(a.options.promptDlg.body);
                      if (n.imgs && n.imgs.length > 0) {
                        (r.innerHTML = ""),
                          r.classList.add(a.options.athGuidance);
                        for (var c = 0; c < n.imgs.length; c++) {
                          var h = new Image();
                          (h.src = n.imgs[c].src),
                            (h.alt = n.imgs[c].alt),
                            n.imgs[c].classes &&
                              h.classList.add(...n.imgs[c].classes),
                            h.classList.add(a.options.showClass),
                            r.appendChild(h);
                        }
                      }
                      (0 === (e = i.getBoundingClientRect()).width ||
                        0 === e.height) &&
                        (i.classList.add(...n.showClasses),
                        i.classList.remove(a.options.hideClass));
                      var g =
                        a.options.lifespan >= 10 ? a.options.lifespan : 10;
                      a.autoHideTimer = setTimeout(a.autoHide, 1e3 * g);
                    }
                  }
              })(!0)
            : (l.closePrompt(), m()),
          !1
        );
      }),
      (g.Class = function (o) {
        ((this.doLog = g.doLog),
        (this.options = Object.assign({}, g.defaults, o)),
        (a = this),
        "serviceWorker" in navigator)
          ? (s.querySelector("[rel='manifest']") ||
              (console.log("no manifest file"), (l.isCompatible = !1)),
            navigator.serviceWorker.getRegistration().then(f),
            (function (o) {
              for (var s in o)
                if (o.hasOwnProperty(s)) {
                  var e = o[s].targetUrl;
                  e && h.push(e);
                }
            })(this.options.prompt))
          : f({});
      });
    var h = [];
    (g.Class.prototype = {
      _canPrompt: e,
      canPrompt: function () {
        if (this._canPrompt !== e) return this._canPrompt;
        if (
          ((this._canPrompt = !1),
          null !== a.options.customCriteria || a.options.customCriteria !== e)
        ) {
          if (
            !("function" == typeof a.options.customCriteria
              ? a.options.customCriteria()
              : !!a.options.customCriteria)
          )
            return (
              this.doLog(
                "Add to homescreen: not displaying callout because a custom criteria was not met."
              ),
              !1
            );
        }
        if (!("serviceWorker" in navigator))
          return (
            this.doLog(
              "Add to homescreen: not displaying callout because service workers are not supported"
            ),
            !1
          );
        if (!l.isCompatible)
          return (
            this.doLog(
              "Add to homescreen: not displaying callout because device not supported"
            ),
            !1
          );
        if (Date.now() - n.lastDisplayTime < 6e4 * this.options.displayPace)
          return (
            this.doLog(
              "Add to homescreen: not displaying callout because displayed recently"
            ),
            !1
          );
        if (
          this.options.maxDisplayCount &&
          n.displayCount >= this.options.maxDisplayCount
        )
          return (
            this.doLog(
              "Add to homescreen: not displaying callout because displayed too many times already"
            ),
            !1
          );
        for (
          var o = !this.options.validLocation.length,
            t = this.options.validLocation.length;
          t--;

        )
          if (this.options.validLocation[t].test(s.location.href)) {
            o = !0;
            break;
          }
        if (!o)
          return (
            this.doLog(
              "Add to homescreen: not displaying callout because not a valid location"
            ),
            !1
          );
        var i = !1;
        for (t = h.length; t--; )
          if (s.location.href.indexOf(h[t]) > -1) {
            i = !0;
            break;
          }
        return i
          ? (this.doLog(
              "Add to homescreen: not displaying callout because this is a guidance URL"
            ),
            !1)
          : n.sessions < this.options.minSessions
          ? (this.doLog(
              "Add to homescreen: not displaying callout because not enough visits"
            ),
            !1)
          : this.options.nextSession &&
            this.options.nextSession > 0 &&
            n.sessions >= this.options.nextSession
          ? (this.doLog(
              "Add to homescreen: not displaying callout because waiting on session " +
                this.options.nextSession
            ),
            !1)
          : n.optedout
          ? (this.doLog(
              "Add to homescreen: not displaying callout because user opted out"
            ),
            !1)
          : n.added
          ? (this.doLog(
              "Add to homescreen: not displaying callout because already added to the homescreen"
            ),
            !1)
          : l.isStandalone
          ? (n.added ||
              ((n.added = !0),
              this.updateSession(),
              this.options.onAdd && this.options.onAdd.call(this)),
            this.doLog(
              "Add to homescreen: not displaying callout because in standalone mode"
            ),
            !1)
          : !n.returningVisitor &&
            ((n.returningVisitor = !0),
            this.updateSession(),
            this.options.skipFirstVisit)
          ? (this.doLog(
              "Add to homescreen: not displaying callout because skipping first visit"
            ),
            !1)
          : ((this._canPrompt = !0), console.log("end canPrompt"), !0);
      },
      show: function (o) {
        a.shown
          ? a.doLog(
              "Add to homescreen: not displaying callout because already shown on screen"
            )
          : ((a.shown = !0),
            "interactive" === s.readyState || "complete" === s.readyState
              ? a._delayedShow()
              : (s.onreadystatechange = function () {
                  "complete" === s.readyState && a._delayedShow();
                }));
      },
      _delayedShow: function (o) {
        setTimeout(a._show(), 1e3 * a.options.startDelay + 500);
      },
      _show: function () {
        if (a.canPrompt()) {
          if (d && !a.options.mustShowCustomPrompt) m();
          else {
            var o = u(),
              e = s.querySelector(a.options.athWrapper);
            if (e && !n.optedout) {
              e.classList.remove(a.options.hideClass);
              var t = Object.assign(
                {},
                p,
                a.options.customPrompt,
                a.options.prompt[o]
              );
              t.showClasses
                ? (t.showClasses = t.showClasses.concat(a.options.showClasses))
                : (t.showClasses = a.options.showClasses);
              for (var i = 0; i < t.showClasses.length; i++)
                e.classList.add(t.showClasses[i]);
              var r = e.querySelector(a.options.promptDlg.title),
                c = e.querySelector(a.options.promptDlg.logo),
                h = e.querySelector(a.options.promptDlg.cancel),
                g = e.querySelector(a.options.promptDlg.install);
              r && t.title && (r.innerText = t.title),
                c &&
                  t.src &&
                  ((c.src = t.src), (c.alt = t.title || "Install PWA")),
                g &&
                  (g.addEventListener("click", l.handleInstall),
                  g.classList.remove(a.options.hideClass),
                  (g.innerText = t.installMsg
                    ? t.installMsg
                    : t.action && t.action.ok
                    ? t.action.ok
                    : a.options.promptDlg.action.ok)),
                h &&
                  (h.addEventListener("click", l.cancelPrompt),
                  h.classList.remove(a.options.hideClass),
                  (h.innerText = t.cancelMsg
                    ? t.cancelMsg
                    : t.action && t.action.cancel
                    ? t.action.cancel
                    : a.options.promptDlg.action.cancel));
            }
            this.options.lifespan &&
              this.options.lifespan > 0 &&
              (a.autoHideTimer = setTimeout(
                this.autoHide,
                1e3 * this.options.lifespan
              ));
          }
          this.options.onShow && this.options.onShow.call(this),
            (n.lastDisplayTime = Date.now()),
            n.displayCount++,
            a.options.displayNextPrime &&
              (n.nextSession = (function (o) {
                for (;;) {
                  var s = !0;
                  isNaN(o) && (o = 0), (o += 1);
                  for (var e = Math.sqrt(o), t = 2; t <= e; t++)
                    if (o % t == 0) {
                      s = !1;
                      break;
                    }
                  if (s) return o;
                }
              })(n.sessions)),
            this.updateSession();
        }
      },
      trigger: function () {
        this._show();
      },
      autoHide: function () {
        var o = u(),
          e = s.querySelector(a.options.athWrapper);
        if (e) {
          var t = a.options.prompt[o];
          (t.showClasses = t.showClasses.concat(a.options.showClasses)),
            e.classList.remove(...t.showClasses),
            e.classList.add(a.options.hideClass);
        }
      },
      updateSession: function () {
        localStorage.setItem(this.options.appID, JSON.stringify(n));
      },
      clearSession: function () {
        (n = c), this.updateSession();
      },
      optOut: function () {
        (n.optedout = !0), this.updateSession();
      },
      optIn: function () {
        (n.optedout = !1), this.updateSession();
      },
      clearDisplayCount: function () {
        (n.displayCount = 0), this.updateSession();
      },
    }),
      (o.addToHomescreen = g);
  }

  function m() {
    return d
      .prompt()
      .then(function (o) {
        return d.userChoice;
      })
      .then(function (o) {
        (n.added = "accepted" === o.outcome),
          n.added
            ? (a.doLog("User accepted the A2HS prompt"),
              a.options.onAdd && a.options.onAdd())
            : (a.options.onCancel && a.options.onCancel(),
              (n.optedout = !0),
              a.doLog("User dismissed the A2HS prompt")),
          a.updateSession(),
          (d = null);
      })
      .catch(function (o) {
        if ((a.doLog(o.message), o.message.indexOf("user gesture") > -1))
          (a.options.mustShowCustomPrompt = !0), a._delayedShow();
        else {
          if (!(o.message.indexOf("The app is already installed") > -1))
            return console.log(o), o;
          console.log(o.message), (n.added = !0), a.updateSession();
        }
      });
  }

  function u(o) {
    return a.options.debug && "string" == typeof a.options.debug
      ? a.options.debug
      : l.isChromium && o === e && !o
      ? "native"
      : l.isFireFox
      ? "firefox"
      : l.isiPad
      ? "ipad"
      : l.isiPhone
      ? "iphone"
      : l.isOpera
      ? "opera"
      : l.isSamsung
      ? "samsung"
      : l.isEdge
      ? "edge"
      : l.isChromium
      ? "chromium"
      : "";
  }

  function g(o) {
    return a || a || new g.Class(o), a;
  }

  function f(s) {
    (a.sw = s),
      a.sw || (console.log("no service worker"), (l.isCompatible = !1)),
      (n.sessions += 1),
      a.updateSession(),
      a.options &&
        a.options.debug &&
        void 0 === a.options.logging &&
        (a.options.logging = !0),
      (a.options.mandatory =
        a.options.mandatory &&
        ("standalone" in o.navigator || a.options.debug)),
      (a.options.modal = a.options.modal || a.options.mandatory),
      a.options.mandatory && (a.options.startDelay = -0.5),
      a.options.debug && (l.isCompatible = !0),
      a.options.onInit && a.options.onInit.call(a),
      a.options.autostart
        ? (a.doLog("Add to homescreen: autostart displaying callout"), a.show())
        : i || a.show();
  }
})(window, document);
